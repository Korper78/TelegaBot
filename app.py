from decimal import Decimal
from os import getenv
from sys import exit

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.deep_linking import get_start_link

from db_api.db_utils import OrderUtils
from keyboards.inline.menu_kb import *

bot_token = getenv("BOT_TOKEN")
if not bot_token:
    exit("Error: no token provided")

bot = Bot(token=bot_token)
dp = Dispatcher(bot)


@dp.message_handler(commands="start", state='*')
async def cmd_start(message: types.Message):
    await message.answer("–ù–∞–ª–µ—Ç–∞–π, —Ç–æ—Ä–æ–ø–∏—Å—å,\n–ø–æ–∫—É–ø–∞–π –∫–æ—Ç–æ–ø–∏—Å—å!!! ")
    await message.answer_dice(emoji='üé∞')
    referrer_id = int(message.text.split()[1] or 0) if len(message.text.split()) > 1 else 0
    if referrer := await UserUtils.get_user(id=referrer_id):
        ref_score = referrer.ref_score
        await UserUtils.update_user(id=referrer_id, ref_score=(ref_score + 100))
    else:
        referrer_id = None
    print(f'Referrer - {referrer_id}, user - {message.from_user.id},'
          f' {message.from_user.username}, {message.from_user.first_name}, '
          f'{message.from_user.last_name}')
    user_append = await UserUtils.add_user(id=message.from_user.id,
                                           username=message.from_user.username,
                                           first_name=message.from_user.first_name,
                                           last_name=message.from_user.last_name,
                                           referrer=referrer_id
                                           )
    print(f'Referral - {user_append}')
    # if user_append and (referrer := await UserUtils.get_user(id=referrer_id)):
    #     ref_score = referrer.ref_score
    #     await UserUtils.update_user(id=referrer_id, ref_score=(ref_score+100))
    await show_menu(message)


async def show_menu(message: types.CallbackQuery | types.Message, category_id: int = None, product_id: int = None):
    if product_id:
        await show_product(callback=message, category_id=category_id, product_id=product_id)
    else:
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–≥–¥–µ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        k_board = await categories_keyboard(category_id=category_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞ —Ç–∏–ø –∞–ø–¥–µ–π—Ç–∞. –ï—Å–ª–∏ Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(message, types.Message):
            await message.answer("–í—ã–±–µ—Ä–∏ —Å–µ–±–µ))):", reply_markup=k_board)

        # –ï—Å–ª–∏ CallbackQuery - –∏–∑–º–µ–Ω—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif isinstance(message, types.CallbackQuery):
            call = message
            # await call.message.edit_reply_markup(k_board)
            await call.message.edit_text(text="–í—ã–±–µ—Ä–∏ —Å–µ–±–µ))):", reply_markup=k_board)
            await call.answer()


async def show_product(callback: types.CallbackQuery, category_id, product_id):
    k_board = product_keyboard(category_id=category_id, product_id=product_id)

    # –ë–µ—Ä–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    product = await ProductUtils.get_product(product_id=product_id)
    text = f"–ö—É–ø–∏ {product.name}\n–ø–æ —Ü–µ–Ω–µ {product.price}$"
    await callback.message.edit_text(text=text, reply_markup=k_board)
    await callback.answer()


@dp.callback_query_handler(menu_cd.filter())
async def navigate(callback: types.CallbackQuery, callback_data: dict):
    """
    :param call: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ CallbackQuery, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    :param callback_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
    category_id = int(callback_data.get("category")) if callback_data.get("category") else None

    # –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ù–ï –í–°–ï–ì–î–ê - –º–æ–∂–µ—Ç –±—ã—Ç—å 0)
    product_id = int(callback_data.get("product")) if callback_data.get("product") else None

    await show_menu(callback, category_id, product_id)

    # –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º "—É—Ä–æ–≤–Ω–∏" –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # levels = {
    #     "0": show_menu,  # –û—Ç–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    #     "1": show_menu,  # –û—Ç–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    #     "2": show_menu,  # –û—Ç–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    #     "3": show_product  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä
    # }
    #
    # # –ó–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    # current_level_function = levels[current_level]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    # await current_level_function(
    #     call,
    #     category_id=category_id,
    #     product_id=product_id
    # )


@dp.callback_query_handler(buy_product.filter())
async def purchase(callback: types.CallbackQuery, callback_data: dict):
    product_id = int(callback_data.get("product"))
    product = await ProductUtils.get_product(product_id=product_id)
    k_board = await categories_keyboard(category_id=product.category_id)
    if order := await OrderUtils.get_ordered(user_id=callback.from_user.id):
        order_id = order.id
        await OrderUtils.update_order(id=order.id, amount=(order.amount + product.price))
    else:
        order_id = await OrderUtils.add_order(user_id=callback.from_user.id, amount=product.price)
    basket_res = await OrderUtils.add_product(order_id=order_id, product_id=product.id)
    print(basket_res)
    text = f"–¢–æ–≤–∞—Ä {product.name}\n–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n–í—ã–±–µ—Ä–∏ –µ—â–µ:)))"
    await callback.message.edit_text(text=text, reply_markup=k_board)
    await callback.answer()



@dp.message_handler(commands="ref")
async def cmd_ref(message: types.Message):
    ref_link = await get_start_link(payload=message.from_user.id)
    await message.answer(f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>', parse_mode='html')


@dp.message_handler(commands="account")
async def cmd_account(message: types.Message):
    await message.answer('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
    # await account_menu(message,)
    user = await UserUtils.get_user(id=message.from_user.id)
    referals = await UserUtils.ref_count(referrer_id=user.id)
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username}\n–£ –≤–∞—Å {referals} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Ö—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö\n'
                         f'–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É {user.ref_score} –±–∞–ª–ª–æ–≤')
    if order := await OrderUtils.get_ordered(user_id=user.id):
        # products = [await ProductUtils.get_product(product_id=product.product_id) for product in await OrderUtils.get_products(order_id=order.id)]
        products = [await ProductUtils.get_product(product_id=product) for product in await OrderUtils.get_products(order_id=order.id)]
        # await message.answer(f'–£ –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—É–º–º—É {order.amount}$:')
        # for product in products:
        #     await message.answer(f'{product.name} –ø–æ —Ü–µ–Ω–µ {product.price}$')
        text = f'–£ –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—É–º–º—É {order.amount}$:'
        # if (user.ref_score / 60) >= order.amount:
        amount = order.amount
        if user.ref_score:
            amount = min(round(order.amount * Decimal(0.6),2), round(user.ref_score / 100,2))
            # amount = order.amount * 0.6 if (order.amount * 0.6) < (user.ref_score / 100) else user.ref_score / 100
            text += f'\n{amount}$ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–ª–∞–º–∏'
            status = 'ref'
        else:
            status = 'pay'
        for product in products:
            text += f'\n{product.name} –ø–æ —Ü–µ–Ω–µ {product.price}$'
        k_board = basket_keyboard(status=status, amount=amount)
        await message.answer(text=text, reply_markup=k_board)


@dp.callback_query_handler(basket_cd.filter())
async def payment(callback: types.CallbackQuery, callback_data: dict):
    status = callback_data.get("status")
    amount = Decimal(callback_data.get("amount"))
    user = await UserUtils.get_user(id=callback.from_user.id)
    print(user.id)
    order = await OrderUtils.get_ordered(user_id=user.id)
    await OrderUtils.update_order(id=order.id, status='payed')
    text = f'–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'
    match status:
        case 'ref':
            text = f'{order.amount - amount}$ –æ–ø–ª–∞—á–µ–Ω–æ\n{amount * 100} –±–∞–ª–ª–æ–≤ —Å–ø–∏—Å–∞–Ω–æ'
            # await OrderUtils.update_order(id=order.id, status='payed')
            user.ref_score -= amount * 100
            await UserUtils.update_user(id=user.id, ref_score=user.ref_score)
            print(f'ref score={user.ref_score}')
        case 'pay':
            text = f'{order.amount}$ –æ–ø–ª–∞—á–µ–Ω–æ'
            # await OrderUtils.update_order(id=order.id, status='payed')
        case 'cancel':
            await OrderUtils.delete_order(id=order.id)
    await callback.message.edit_text(text=text, reply_markup=None)
    await callback.answer()



if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
